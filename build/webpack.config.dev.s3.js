const s3 = require("s3");
const path = require("path");
const VueLoaderPlugin = require("vue-loader/lib/plugin");
const VuetifyLoaderPlugin = require("vuetify-loader/lib/plugin");
const CopyPlugin = require("copy-webpack-plugin");
const { CleanWebpackPlugin } = require("clean-webpack-plugin");

const DIST_PATH = path.resolve(__dirname, "../dist");

// set using
// npm config set widget-template-vue:publicPath "https://3dexp.19xfd03.ds/WidgetLab/"
let publicPath = process.env.npm_package_config_publicPath;
let host = "0.0.0.0";
if (publicPath === undefined || publicPath === null || publicPath.trim() === "") {
    publicPath = "";
    host = "localhost";
}

const client = s3.createClient({
    /* maxAsyncS3: 20,     // this is the default
    s3RetryCount: 3,    // this is the default
    s3RetryDelay: 1000, // this is the default
    multipartUploadThreshold: 20971520, // this is the default (20 MB)
    multipartUploadSize: 15728640, // this is the default (15 MB) */
    s3Options: {
        accessKeyId: "xxx",
        secretAccessKey: "xxx"
        // any other options are passed to new AWS.S3()
        // See: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Config.html#constructor-property
    }
});

class MyExampleWebpackPlugin {
    // Define `apply` as its prototype method which is supplied with compiler as its argument
    apply(compiler) {
        compiler.hooks.emit.tap("MyExampleWebpackPlugin", (compilation, callback) => {
            console.log("#######emit");
            // const assets = Object.keys(compilation.assets);
            /* const d = Object.keys(compilation.compilation.assets);
            for (const file of d) {
                console.log("!" + file);
            } */
            console.log("#######emit");
            console.log("#######emit");
        });
        compiler.hooks.afterCompile.tap("MyExampleWebpackPlugin", (compilation, callback) => {
            console.log("#######afterCompile");
            // const assets = Object.keys(compilation.assets);
            /* const d = Object.keys(compilation.compilation.assets);
            for (const file of d) {
                console.log("!" + file);
            } */
            console.log("#######afterCompile");
            console.log("#######afterCompile");
        });
        compiler.hooks.compilation.tap("MyExampleWebpackPlugin", (compilation, callback) => {
            compilation.hooks.finishModules.tap("MyExampleWebpackPlugin", (modules, callback) => {
                console.log("#######compilation");
                console.log(compilation.assets);
                // console.log(modules);

                compilation.chunks.forEach(chunk => {
                    // Explore each module within the chunk (built inputs):
                    chunk.getModules().forEach(module => {
                        // Explore each source file path that was included into the module:
                        module.fileDependencies.forEach(filepath => {
                            // we've learned a lot about the source structure now...
                        });
                    });

                    // Explore each asset filename generated by the chunk:
                    chunk.files.forEach(filename => {
                        // Get the asset source for each file generated by the chunk:
                        // var source = compilation.assets[filename].source();
                        console.log(filename);
                    });
                });
                console.log("#######compilation");
                // callback();
                // console.log(compilation.chunks);
                // compilation.chunks.forEach(chunk => {
                //  console.log(typeof chunk.files);
                // console.log(chunk.files);
                // uploadToS3(chunk.files);
                // });
            });
        });
        compiler.hooks.done.tap("MyExampleWebpackPlugin", (compilation, callback) => {
            // const assets = Object.keys(compilation.assets);
            const d = Object.keys(compilation.compilation.assets);
            for (const file of d) {
                console.log("!" + file);
            }
            console.log("#######afterCompile");
        });
        compiler.hooks.make.tapAsync("MyExampleWebpackPlugin", (compilation, cb) => {
            console.log("make");
        });
        compiler.plugin("should-emit", compilation => {
            console.log("should i emit?");
            return true;
        });
    }
}

const uploadToS3 = function(localFile) {
    console.error(typeof localFile);
    console.error(localFile);
    console.error(DIST_PATH);
    let s3FilePath = "II2/WidgetLab/WidgetTemplate/" + localFile.replace(DIST_PATH + "/", "");
    console.error(s3FilePath);
    const params = {
        localFile: localFile,
        s3Params: {
            Bucket: "btcc",
            Key: s3FilePath
            // other options supported by putObject, except Body and ContentLength.
            // See: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property
        }
    };
    const uploader = client.uploadFile(params);
    uploader.on("error", function(err) {
        console.error("unable to upload:", err.stack);
    });
    uploader.on("progress", function() {
        console.log("progress", uploader.progressMd5Amount, uploader.progressAmount, uploader.progressTotal);
    });
    uploader.on("end", function() {
        console.log("done uploading");
    });
};

module.exports = env => {
    return {
        mode: "development",
        entry: ["./src/main.js"],
        devtool: "inline-source-map",
        devServer: {
            contentBase: "./dist",
            hot: true,
            compress: true,
            // allow to be called from any host
            disableHostCheck: true,
            // host must be 0.0.0.0 if we want to be reachable from LAN
            host,
            // to prevent CORS issues
            headers: { "Access-Control-Allow-Origin": "*" },
            writeToDisk: file => {
                console.log(">>" + file);
                return true;
            }
        },
        output: {
            filename: "bundle.js",
            path: DIST_PATH,
            publicPath
        },
        module: {
            rules: [
                {
                    test: /\.(svg|eot|woff|ttf|svg|woff2)$/,
                    use: [
                        {
                            loader: "file-loader",
                            options: {
                                name: "[name].[ext]",
                                outputPath: "static/fonts"
                            }
                        }
                    ]
                },
                {
                    test: /.vue$/,
                    loader: "vue-loader"
                },
                {
                    test: /.js$/,
                    loader: "babel-loader",
                    exclude: [/node_modules/, /src\/static/],
                    query: {
                        presets: ["@babel/env"]
                    }
                },
                {
                    test: /.css$/,
                    loader: ["style-loader", "css-loader"]
                },
                {
                    test: /\.s(c|a)ss$/,
                    use: [
                        "vue-style-loader",
                        "css-loader",
                        {
                            loader: "sass-loader",
                            options: {
                                implementation: require("sass"),
                                fiber: require("fibers"),
                                indentedSyntax: true // optional
                            }
                        }
                    ]
                }
            ]
        },
        plugins: [
            new CleanWebpackPlugin(),
            new CopyPlugin([{ from: "./src/index.html", to: "./index.html" }, { from: "./src/static", to: "static", ignore: ["*.md"] }]),
            new VueLoaderPlugin(),
            new VuetifyLoaderPlugin(),
            new MyExampleWebpackPlugin()
        ]
    };
};
